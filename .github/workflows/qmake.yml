name: QMake build

on: 
  # push代码时触发workflow
  push:
    paths-ignore: # 下列文件的变更不触发部署，可以自行添加
        - '.github/workflows/clean_cache.yml'
        - '.github/workflows/delete_workflow.yml'
        - '.github/workflows/cmake.yml'
        - '.github/workflows/readme.yml'
        - '.github/workflows/toolchain.yml'        
        - 'doc/**'
        - '.clang*'
        - '.gitignore'
        - 'LICENSE'
        - 'README*'
        - 'vcpkg.json'
  pull_request:
    paths-ignore: # 下列文件的变更不触发部署，可以自行添加
        - '.github/workflows/clean_cache.yml'
        - '.github/workflows/delete_workflow.yml'
        - '.github/workflows/cmake.yml'
        - '.github/workflows/readme.yml'
        - '.github/workflows/toolchain.yml'
        - 'doc/**'
        - '.clang*'
        - '.gitignore'
        - 'LICENSE'
        - 'README*'
        - 'vcpkg.json'

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
          - macos-latest
          - ubuntu-latest
        qt_ver: 
          - 6.6.2
        vcpkg_libs:
          - breakpad
        vcpkg_ffmpeg_features:
          - opengl,ass,bzip2,freetype,fribidi,zlib,gpl,ffmpeg,ffplay,ffprobe

    steps:
      - name: Restore windows vcpkg
        if: startsWith(matrix.os, 'windows')
        uses: actions/cache/restore@v4
        with: 
          path: C:\vcpkg\installed
          key: ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}
      - name: Restore macos or ubuntu vcpkg
        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')
        uses: actions/cache/restore@v4
        with: 
          path: /usr/local/share/vcpkg/installed
          key: ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}
              
      - name: Install dependencies on windows
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          choco install ninja
          ninja --version
          cmake --version
          vcpkg install ${{ matrix.vcpkg_libs }}  ffmpeg[${{ matrix.vcpkg_ffmpeg_features }},amf,nvcodec,qsv] --triplet x64-windows
      - name: Install dependencies on macos
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          brew install ninja nasm pkg-config
          ninja --version
          cmake --version
          clang --version
          vcpkg install ${{ matrix.vcpkg_libs }} ffmpeg[${{ matrix.vcpkg_ffmpeg_features }}] --triplet x64-osx
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build nasm autopoint gperf libgl1-mesa-dev \
            libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev
          ninja --version
          cmake --version
          gcc --version
          vcpkg install ${{ matrix.vcpkg_libs }} ffmpeg[${{ matrix.vcpkg_ffmpeg_features }},amf,nvcodec] --triplet x64-linux

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          install-deps: 'true'
          modules: 'qt5compat qtnetworkauth qtmultimedia qtimageformats'
          cache: 'true'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: msvc-build
        if: startsWith(matrix.os, 'windows')
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          qmake
          nmake
      - name: build macos or ubuntu
        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          qmake
          make -j4
